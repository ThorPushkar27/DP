class Solution {
public:
    int helper(vector<int>&nums, int n, vector<int>&dp){
        if(n ==0 ) return nums[0];
        if(n<0) return 0;
        // Memoization step.
        if(dp[n]!= -1) return dp[n];
        int pick= nums[n] + helper(nums, n-2, dp);
        int notpick = 0+ helper(nums, n-1,dp);
        return dp[n] = max(pick,notpick);
    }
    int rob(vector<int>& nums) {
        int n = nums.size();
        if(n == 1) return nums[0];
        vector<int>dp(n,-1);
        vector<int>dp1(n,-1);
        vector<int>temp(nums.begin(), nums.end()-1);
        vector<int>temp1(nums.begin()+1, nums.end());
        int a = helper(temp,n-2,dp); 
        int b = helper(temp1,n-2,dp1);
        return max(a,b);
    }
};
